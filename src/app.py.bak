
# -*- coding: utf-8 -*-
# Flask žiniatinklio API – Išmanioji Hidratacija (LT)
from __future__ import annotations
import os, json
from flask import Flask, request, jsonify, render_template_string
from flask_cors import CORS
from hidratacijos_prognoze import HidratacijosModelis

APP_NAME = "Išmanioji Hidratacija – Demo"
app = Flask(__name__)
CORS(app)

# Inicijuojame modelį paleidžiant serverį
MODEL = HidratacijosModelis()
DUOMENYS = MODEL.generuoti_demo_duomenis(dienos=30)
METR = MODEL.apmokyti(DUOMENYS)

@app.get("/api/health")
def health():
    return jsonify({
        "status": "ok",
        "app": APP_NAME,
        "model": "LinearRegression + StandardScaler",
        "r2_test": round(METR.r2_test, 3)
    })

@app.post("/api/predict")
def predict():
    try:
        payload = request.get_json(force=True, silent=False) or {}
        ats = MODEL.prognozuoti(payload)
        return jsonify({"ok": True, "rezultatas": ats})
    except Exception as e:
        return jsonify({"ok": False, "klaida": str(e)}), 400

@app.get("/api/stats")
def stats():
    return jsonify(MODEL.statistika())

@app.get("/api/docs")
def docs():
    return jsonify({
        "endpoints": {
            "/": "Žiniatinklio forma ir demo (GET)",
            "/api/health": "Sveikatos patikra (GET)",
            "/api/predict": "Prognozė: POST JSON su laukais (vandens_ml, zingsniai, sirdies_ritmas, stresas, miegas_val, temperatura_c, aktyvumas_min)",
            "/api/stats": "Aprašomoji statistika (GET)",
            "/api/retrain": "Persimokyti modelį su naujai sugeneruotais duomenimis (POST; optional: dienos=int)"
        }
    })

@app.post("/api/retrain")
def retrain():
    global DUOMENYS, METR
    payload = request.get_json(silent=True) or {}
    dienos = int(payload.get("dienos", 30))
    DUOMENYS = MODEL.generuoti_demo_duomenis(dienos=dienos)
    METR = MODEL.apmokyti(DUOMENYS)
    return jsonify({"ok": True, "metrics": MODEL.santrauka()})

# Paprasta UI forma
INDEX_HTML = """
<!doctype html>
<html lang="lt">
<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <title>{{app_name}}</title>
  <style>
    body{font-family:system-ui,-apple-system,Segoe UI,Roboto,Ubuntu,"Helvetica Neue",Arial;
         margin:0;background:linear-gradient(180deg,#f8fbff 0%,#eef5ff 100%);}
    header{padding:24px 20px;background:#0b5cff;color:white}
    main{padding:24px;max-width:960px;margin:0 auto}
    .card{background:white;border-radius:16px;box-shadow:0 8px 30px rgba(0,0,0,.07);
          padding:20px;margin-bottom:20px}
    label{display:block;margin:8px 0 4px;font-weight:600}
    input{width:100%;padding:10px;border:1px solid #d7e0ef;border-radius:10px}
    button{margin-top:16px;padding:12px 16px;border:0;border-radius:12px;cursor:pointer}
    .primary{background:#0b5cff;color:#fff}
    .muted{background:#eef3ff;color:#234}
    pre{white-space:pre-wrap}
  </style>
</head>
<body>
  <header><h1>Išmanioji Hidratacija – demo</h1></header>
  <main>
    <div class="card">
      <h2>Realiojo laiko prognozė</h2>
      <form id="f">
        <div class="grid">
          <label>Vanduo (ml)</label><input name="vandens_ml" type="number" value="2000" step="50">
          <label>Žingsniai</label><input name="zingsniai" type="number" value="8000" step="100">
          <label>Širdies ritmas (bpm)</label><input name="sirdies_ritmas" type="number" value="70" step="1">
          <label>Stresas (1–10)</label><input name="stresas" type="number" value="5" min="1" max="10">
          <label>Miegas (val.)</label><input name="miegas_val" type="number" value="7" step="0.1">
          <label>Temperatūra (°C)</label><input name="temperatura_c" type="number" value="22" step="0.1">
          <label>Aktyvumas (min)</label><input name="aktyvumas_min" type="number" value="45" step="5">
        </div>
        <button class="primary" type="submit">Skaičiuoti prognozę</button>
        <button class="muted" id="docs" type="button">API dokumentacija</button>
      </form>
    </div>
    <div class="card"><h3>Rezultatas</h3><pre id="out">—</pre></div>
  </main>
  <script>
    const f = document.getElementById("f");
    const out = document.getElementById("out");
    const toJSON = (form) => Object.fromEntries(new FormData(form).entries());
    f.addEventListener("submit", async (e)=>{
      e.preventDefault();
      const payload = toJSON(f);
      for (const k in payload) payload[k] = Number(payload[k]);
      const r = await fetch("/api/predict", {method:"POST", headers:{'Content-Type':'application/json'}, body:JSON.stringify(payload)});
      const j = await r.json();
      out.textContent = JSON.stringify(j, null, 2);
    });
    document.getElementById("docs").addEventListener("click", async ()=>{
      const r = await fetch("/api/docs");
      const j = await r.json();
      out.textContent = JSON.stringify(j, null, 2);
    });
  </script>
</body>
</html>
"""

@app.get("/")
def index():
    return render_template_string(INDEX_HTML, app_name=APP_NAME)

if __name__ == "__main__":
    port = int(os.environ.get("PORT", "5050"))
    debug = os.environ.get("DEBUG", "0") == "1"
    app.run(host="0.0.0.0", port=port, debug=debug)
